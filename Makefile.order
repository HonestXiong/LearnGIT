makefile语法
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
通配符%是寻找makefile里面的所有，*则是寻找系统目录下的所有
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
taegets : prerequisites
	command
	...
或者--------------------------------------------------
targets : prerequisites : command
	command
	---
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
使用变量，例如：
原本命令：
objects = main.o command.o
	cc -o edit main.o command.o

main.o : main.c main.h
	cc -c main.c
command.o : command.c command.h
	cc -c command.c
使用变量:
objects = main.o command.o

edit : $(objects)
	cc -o edit $(objects)

main.o : main.c main.h
        cc -c main.c
command.o : command.c command.h
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
makefile可以自动推导文件以及文件依赖关系后面的命令，只要它看到一个.o文件，它就会自动把.c文件加到依赖关系中。比如makefile找到一个whatever.o，那么whatever就会是whatever.o的依赖文件，并且cc -c whatever.c也会被推导出来。
objects = main.o command.o

edit : $(objects)
	cc -o edit $(objects)

main.o : main.h
command.o : command.h
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.PHONY : clean
clean :
	-rm Hello $(objects)
.PHONY表示clean是一个伪目标，在rm前面加一个减号-，意思是不管是否有问题出现，都要继续clean
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#为注释符号，若要使用#本身，需要使用转义字符\，即\#
\也可以作为换行符
可以用别的文件名书写makefile，比如Make.Linux。如果要指定makefile，可以用-f参数，如make -f Make.Linux
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
include <filenames>		包含其他的makefile文件，include前面不可有tab
VPATH = src:include:lib		VPATH使makefile在当前目录找不到源文件情况下去指定				目录中找，目录之间用冒号:分隔开
另一个设置文件搜索路径的方法是使用vpath关键字，可以指定不同文件在不同目录中
vpath pattern directories
	为符合模式pattern的文件指定目录directories
vpath pattern
	清除符合模式pattern的文件目录
vpath
	清楚所有已经设置好了的文件搜索目录
vpath使用时，pattern需要包含%，如%.h表示所有以.h结尾的文件
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.PHONY		显式生命一个目标是伪目标。
.PHONY : clean	只要有这个声明，不管是否有“clean”这个文件，要运行目标“clean”，只		能make clean。
伪目标同样可以作为目标，一个用法是，使用为目标一次生成若干个可执行文件：
.PHONY : all
all : prog1 prog2

prog1 : prog1.o
	cc -o prog1 prog1.o
prog2 : prog2.o
	cc -o prog2 prog2.o
-------------------------------------------------------
伪目标也可以成为依赖：
.PHONY : cleanall cleanobj cleandiff

cleanall : cleanobj clean diff
	rm program

cleanobj :
	rm *.o

cleandiff :
	rm *.diff

make cleanall将清楚所有要被清除的文件。cleanobj和cleandiff这两个为目标有点像子程序，可以使用make cleanall和make cleanobj和make cleandiff命令来达到清楚不同种类文件的目的
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
自动生成依赖
--------------------------------------------------------
gcc -M main.c		其输出是：
main.o : main.c main.h
有些情况下-M得换成-MM，都则-M会将一些标准库的头文件也包含进来
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@		用在命令前可以隐藏其在make时的显示

:		要让上一条命令的结果应用在下一条命令，则要用分号:隔开这两条命令：
exec :
	cd /home/dev
	pwd
	只会打印出当前目录

exec : 
	cd /home/dev:pwd
	会打印出切换到/home/dev之后的目录
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
嵌套执行make
--------------------------------------------------------
subsystem :
	cd ./HelloWorld && $(MAKE)

等价于

subsystem :
	$(MAKE) -C ./HelloWorld

先进入./HelloWorld目录再执行make指令
--------------------------------------------------------
export variable		将变量variable转递至下级makefile中
unexport variable	不将变量variable传递至下级makefile中

export variable = value
等价于
variable = value
export variable
等价于
export variable := value
等价于
variable := value
export variable

export variable += value
等价于
variable += value
export variable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
定义命令包
--------------------------------------------------------
如果makefile中出现一些相同命令序列，那么可以为他们定义一个变量。
define run-yacc
yacc $(firstword $^)
mv y.tab.c $@
endef
“run-yacc”是这个命令包的名字，define和endef之中的两行就是命令序列。第一行命令是运行yacc程序，第二行命令是把这个文件改名。要使用命令包，就要像使用变量一样：
$(run-yacc)

