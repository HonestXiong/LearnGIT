#! /bin/bash		#!是一个约定标记，告诉系统这个脚本用司马解释其执行
------------------------
#开头的行就是注释

多行注释
:<<EOF
xxxxx
xxxxx
xxxxx
EOF
或者EOF也可以用其他符号代替
:<<!
xxxxx
xxxxx
xxxxx
!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
shell变量
-------------------------
定义变量名，变量名不加$符号，如：
your_name="runoob.com"
变量名和等号之间不能有空格

变量命名遵循以下规则：
1.	命名只能使用英文字母，数字和下划线，首个字符不能是数字
2.	中间不能有空格，可以用下划线
3.	不能使用标点符号
4.	不能使用bash里面的关键字
除了显式的直接赋值，还可以用语句给变量赋值，如：
for file in 'ls /etc'
或者
for file in $(ls /etc)
-------------------------
使用变量，只要在变量名前面加$符号，如：
name="Honest"
echo $name
echo ${name}
花括号{}可加可不加，可以帮助解释其识别边界，例如：
for skill in Ada Coffe Action Java:do
	ehco "I am good at ${skill}Script"
如果不给skill变量加{}，解释器就会把$skillScript当作一个变量
-------------------------
readonly命令可以将变量定义为只读变量，如：
#! /bin/bash
myurl="www.bing.com"
readonly myurl
myurl="www.baidu.com"
运行脚本，结果如下：
/bin/sh:NAME:This variable is read only
-------------------------
unset命令删除变量：
unset name
unset命令无法删除只读变量
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Shell字符串
-------------------------
字符串可以用单引号，也可以用双引号，也可以不用引号

单引号:
str='this is a string'
单引号字符串的限制：
	单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
	单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
-------------------------
双引号:
name="Honest"
str="Hello,My name is \"$name\" \n"
echo -e $str
输出结果为：
Hello,My name is "Honest"
双引号的优点：
	双引号里可以有变量
	双引号里可以出现转义字符
-------------------------
获取字符串长度,例如:

string="abcd"
ehco $(#string)		输出4,变量为字符串时，$(#string)等价于${#string[0]}
-------------------------
提取子字符串，例如:
从字符串第2个字符开始截取4个字符
string="runoob is a great site"
echo ${string:1:4}	输出unoo
-------------------------
查找子字符串，例如:
查找字符i或o的位置(那个字符先出现就计算哪个)
string:"runoob is a great site"
echo `expr index "$string" io`	#输出4，`为反引号，tab上面一个键位
-------------------------
bash指出一维数组，不支持多维数组，并且没有限定数组的大小

数组定义形式为：
array=(value0 value1 value2)	数组元素用空格分隔开，也可以不是用连续的下标

读取数组元素的一般格式是：
${array[n]}		当n为@时，可以获取数组中所有元素
-------------------------
获取数组长度，与获取字符串长度方法相同
lenght=${#array[@]}
或者
langht=${#array[*]}
或者
lenght=$#array{[n]}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
shell传参
-------------------------
脚本内获取参数的格式为$n,例如:
#!/bin/bash
echo "Shell 传递参数实例！";
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";
输出结果为:
$ chmod +x test.sh
$ ./test.sh 1 2 3
Shell 传递参数实例！
执行的文件名：./test.sh
第一个参数为：1
第二个参数为：2
第三个参数为：3
