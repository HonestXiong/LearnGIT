#! /bin/bash		#!是一个约定标记，告诉系统这个脚本用什么解释其执行
------------------------
#开头的行就是注释

多行注释
:<<EOF
xxxxx
xxxxx
xxxxx
EOF
或者EOF也可以用其他符号代替
:<<!
xxxxx
xxxxx
xxxxx
!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
shell变量
-------------------------
定义变量名，变量名不加$符号，如：
your_name="runoob.com"
变量名和等号之间不能有空格

变量命名遵循以下规则：
1.	命名只能使用英文字母，数字和下划线，首个字符不能是数字
2.	中间不能有空格，可以用下划线
3.	不能使用标点符号
4.	不能使用bash里面的关键字
除了显式的直接赋值，还可以用语句给变量赋值，如：
for file in 'ls /etc'
或者
for file in $(ls /etc)
-------------------------
使用变量，只要在变量名前面加$符号，如：
name="Honest"
echo $name
echo ${name}
花括号{}可加可不加，可以帮助解释其识别边界，例如：
for skill in Ada Coffe Action Java:do
	ehco "I am good at ${skill}Script"
如果不给skill变量加{}，解释器就会把$skillScript当作一个变量
-------------------------
readonly命令可以将变量定义为只读变量，如：
#! /bin/bash
myurl="www.bing.com"
readonly myurl
myurl="www.baidu.com"
运行脚本，结果如下：
/bin/sh:NAME:This variable is read only
-------------------------
unset命令删除变量：
unset name
unset命令无法删除只读变量
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Shell字符串
-------------------------
字符串可以用单引号，也可以用双引号，也可以不用引号

单引号:
str='this is a string'
单引号字符串的限制：
	单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
	单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
-------------------------
双引号:
name="Honest"
str="Hello,My name is \"$name\" \n"
echo -e $str
输出结果为：
Hello,My name is "Honest"
双引号的优点：
	双引号里可以有变量
	双引号里可以出现转义字符
-------------------------
获取字符串长度,例如:

string="abcd"
ehco $(#string)		输出4,变量为字符串时，$(#string)等价于${#string[0]}
-------------------------
提取子字符串，例如:
从字符串第2个字符开始截取4个字符
string="runoob is a great site"
echo ${string:1:4}	输出unoo
-------------------------
查找子字符串，例如:
查找字符i或o的位置(那个字符先出现就计算哪个)
string:"runoob is a great site"
echo `expr index "$string" io`	#输出4，`为反引号，tab上面一个键位
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
shell传参
-------------------------
脚本内获取参数的格式为$n,$0为执行的文件名，例如:
#!/bin/bash
echo "Shell 传递参数实例！";
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";
输出结果为:
$ chmod +x test.sh
$ ./test.sh 1 2 3
Shell 传递参数实例！
执行的文件名：./test.sh
第一个参数为：1
第二个参数为：2
第三个参数为：3
--------------------------
$#	传递到脚本的参数个数

$*	以一个单字符串显示所有向脚本传递的参数。
	如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。

$$	脚本运行的当前进程ID号

$!	后台运行的最后一个进程的ID号

$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
	如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。

$-	显示Shell使用的当前选项，与set命令功能相同。

$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
bash指出一维数组，不支持多维数组，并且没有限定数组的大小

数组定义形式为：
array=(value0 value1 value2)    数组元素用空格分隔开，也可以不是用连续的下标

读取数组元素的一般格式是：
${array[n]}             当n为@时，可以获取数组中所有元素
-------------------------
获取数组长度，与获取字符串长度方法相同
lenght=${#array[@]}
或者
langht=${#array[*]}
或者
lenght=$#array{[n]}
-------------------------
bash支持关联数组，可以使用任意的字符串，或者整数作为下标来访问数组元素
decalre -A array		关联数组是唯一的
-------------------------
@或*可以获取数组中所有元素，例如：
array[0]=A
array[1]=B
array[2]=C
echo "数组所有元素为:${array[@]}"
echo "数组所有元素为:${array[*]}"
-------------------------
在数组前加一个感叹号!可以获取数组的所有键，例如：
declare -A site
site["google"]="www.google.com"
site["runoob"]="www.runoob.com"
site["taobao"]="www.taobao.com"

echo "数组的键为: ${!site[*]}"
echo "数组的键为: ${!site[@]}"
输出结果如下：
数组的键为: google runoob taobao
数组的键为: google runoob taobao
-------------------------
获取数组长度与获取字符串长度的方法相同，例如:
#!/bin/bash

my_array[0]=A
my_array[1]=B
my_array[2]=C
my_array[3]=D

echo "数组元素个数为: ${#my_array[*]}"
echo "数组元素个数为: ${#my_array[@]}"
输出结果如下:
$ chmod +x test.sh
$ ./test.sh
数组元素个数为: 4
数组元素个数为: 4
-------------------------
bash不支持简单的数学运算，但可以用awk和expr完成，expr最常用
#! /bin/bash
value=`expr 9 + 9`
echo "value"
表达式和运算符之间要有空格，2+2是错误的，2 + 2才是对的

乘号前面要加反斜杠，例如:
value=`expr 3 \* 6`

同样，条件表达式也要有空格，并且要放在方括号之间，例如:
if [ $a == $b]
then
	echo "a等于b"
fi
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
关系运算符
-------------------------
关系运算符只支持数字，不支持字符串，除非字符串的值是数字
-eq	检测两个数是否相等，相等返回 true			[ $a -eq $b ] 返回 false。
-ne	检测两个数是否不相等，不相等返回 true			[ $a -ne $b ] 返回 true。
-gt	检测左边的数是否大于右边的，如果是，则返回 true		[ $a -gt $b ] 返回 false。
-lt	检测左边的数是否小于右边的，如果是，则返回 true		[ $a -lt $b ] 返回 true。
-ge	检测左边的数是否大于等于右边的，如果是，则返回 true	[ $a -ge $b ] 返回 false。
-le	检测左边的数是否小于等于右边的，如果是，则返回 true	[ $a -le $b ] 返回 true。
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
布尔运算符
-------------------------
!	非运算，表达式为 true 则返回 false，否则返回 true	[ ! false ] 返回 true。
-o	或运算，有一个表达式为 true 则返回 true			[ $a -lt 20 -o $b -gt 100 ] 返回 true。
-a	与运算，两个表达式都为 true 才返回 true			[ $a -lt 20 -a $b -gt 100 ] 返回 false。
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
逻辑运算符
-------------------------
&&	逻辑的 AND	[[ $a -lt 100 && $b -gt 100 ]] 返回 false
||	逻辑的 OR	[[ $a -lt 100 || $b -gt 100 ]] 返回 true
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
字符运算符
-------------------------
=	检测两个字符串是否相等，相等返回true		[ $a = $b ] 返回 false
!=	检测两个字符串是否不相等，不相等返回true	[ $a != $b ] 返回 true
-z	检测字符串长度是否为0，为0返回true		[ -z $a ] 返回 false
-n	检测字符串长度是否不为 0，不为 0 返回true	[ -n "$a" ] 返回 true
$	检测字符串是否不为空，不为空返回true		[ $a ] 返回 true
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
文件测试元算符
-------------------------
文件测试运算符用于检测Unix文件的各种属性：
-b file	检测文件是否是块设备文件，如果是，则返回 true					[ -b $file ] 返回 false。
-c file	检测文件是否是字符设备文件，如果是，则返回 true					[ -c $file ] 返回 false。
-d file	检测文件是否是目录，如果是，则返回 true						[ -d $file ] 返回 false。
-f file	检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。	[ -f $file ] 返回 true。
-g file	检测文件是否设置了 SGID 位，如果是，则返回 true					[ -g $file ] 返回 false。
-k file	检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true			[ -k $file ] 返回 false。
-p file	检测文件是否是有名管道，如果是，则返回 true					[ -p $file ] 返回 false。
-u file	检测文件是否设置了 SUID 位，如果是，则返回 true					[ -u $file ] 返回 false。
-r file	检测文件是否可读，如果是，则返回 true						[ -r $file ] 返回 true。
-w file	检测文件是否可写，如果是，则返回 true						[ -w $file ] 返回 true。
-x file	检测文件是否可执行，如果是，则返回 true						[ -x $file ] 返回 true。
-s file	检测文件是否为空（文件大小是否大于0），不为空返回 true				[ -s $file ] 返回 true。
-e file	检测文件（包括目录）是否存在，如果是，则返回 true				[ -e $file ] 返回 true。
其他检查符：
-S: 判断某文件是否 socket。
-L: 检测文件是否存在并且是一个符号链接。
